Q1
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <dirent.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>

void
mk_token(char *s, char *tok[])
{
int i = 0;
char *p;
p = strtok(s, " ");
while (p != NULL)
{
tok[i++] = p;
p = strtok(NULL, " ");
}
tok[i] = NULL;
}

void count(char *fn, char op)
{
int fh, cc = 0, wc = 0, lc = 0;
char c;
fh = open(fn, O_RDONLY);
if (fh == -1)
{
printf("File %s is Not Found!!\n", fn);
return;
}
while (read(fh, &c, 1) > 0)
{
if (c == ' ')
wc++;
else if (c == '\n')
{
wc++;
lc++;
}
cc++;
}
close(fh);
switch (op)
{
case 'c':
printf("No. of characters = %d\n", cc);
break;
case 'w':
printf("No. of words = %d\n", wc);
break;
case 'l':
printf("No. of lines = %d\n", lc);
break;
default:
printf("Bad Command!!");
break;
}
}

void typeline(char *fn, char *op)
{
int fh, i = 0, j = 0, n;
char c;
fh = open(fn, O_RDONLY);
if (fh == -1)
{
printf("File %s is Not Found!!\n", fn);
return;
}

if (strcmp(op, "a") == 0)
{
while (read(fh, &c, 1) > 0)
{
printf("%c", c);
}
}

n = atoi(op);
if (n > 0)
{
while (read(fh, &c, 1) > 0)
{
printf("%c", c);
if (c == '\n')
i++;
if (i == n)
break;
}
close(fh);
return;
}

if (n < 0)
{
while (read(fh, &c, 1) > 0)
{
if (c == '\n')
i++;
}
lseek(fh, 0, SEEK_SET);
while (read(fh, &c, 1) > 0)
{
if (c == '\n')
j++;
if (i == j - n)
break;
}
while (read(fh, &c, 1) > 0)
{
printf("%c", c);
}
}
close(fh);
}

void list(char *dn, char op)
{
DIR *dp;
struct dirent *entry;
int dc = 0, fc = 0;
dp = opendir(dn);
if (dp == NULL)
{
printf("Directory %s is Not Found!!\n", dn);
return;
}
switch (op)
{
case 'f':
while (entry = readdir(dp))
{
if (entry->d_type == DT_REG)
printf("%s\n", entry->d_name);
}
break;
case 'n':
while (entry = readdir(dp))
{
if (entry->d_type == DT_DIR)
dc++;
if (entry->d_type == DT_REG)
fc++;
}
printf("DIR = %d\nFiles = %d\n", dc, fc);
break;
case 'i':
while (entry = readdir(dp))
{
if (entry->d_type == DT_REG)
printf("%s\t%d\n", entry->d_name, entry->d_fileno);
}
break;
default:
printf("Bad Command!!");
break;
}
closedir(dp);
}

int main()
{
int pid;
char ch;
char buff[80], *args[10];
printf("myshell$ ");
fflush(stdin);
fgets(buff, 80, stdin);
buff[strlen(buff) - 1] = '\0';
mk_token(buff, args);
if (strcmp(args[0], "count") == 0)
count(args[2], args[1][0]);
else if (strcmp(args[0], "list") == 0)
list(args[2], args[1][0]);
else if (strcmp(args[0], "typeline") == 0)
typeline(args[2], args[1]);
else
{
if (execvp(args[0], args) == -1)
printf("Command Not Found!!\nPlease Enter Proper Command....\n");
}
return 0;
}























Q2.
#include <stdio.h>
int
main()
{
int at[10], bt[10], pr[10];
int n, i, j, temp, time = 0, count, over = 0, sum_wait = 0, sum_turnaround = 0, start;
float avgwait, avgturn;
printf("Enter the number of processes\n");
scanf("%d", &n);
for (i = 0; i < n; i++)
{
printf("Enter the arrival time and execution time for process %d\n", i + 1);
scanf("%d%d", &at[i], &bt[i]);
pr[i] = i + 1;
}
for (i = 0; i < n - 1; i++)
{
for (j = i + 1; j < n; j++)
{
if (at[i] > at[j])
{
temp = at[i];
at[i] = at[j];
at[j] = temp;
temp = bt[i];
bt[i] = bt[j];
bt[j] = temp;
temp = pr[i];
pr[i] = pr[j];
pr[j] = temp;
}
}
}
printf("\n\nProcess\t|Arrival time\t|Execution time\t|Start time\t|End time\t|waiting time\t|Turnaround time\n\n");
while (over < n)
{
count = 0;
for (i = over; i < n; i++)
{
if (at[i] <= time)
count++;
else
break;
}
if (count > 1)
{
for (i = over; i < over + count - 1; i++)
{
for (j = i + 1; j < over + count; j++)
{
if (bt[i] > bt[j])
{
temp = at[i];
at[i] = at[j];
at[j] = temp;
temp = bt[i];
bt[i] = bt[j];
bt[j] = temp;
temp = pr[i];
pr[i] = pr[j];
pr[j] = temp;
}
}
}
}
start = time;
time += bt[over];
printf("p[%d]\t|\t%d\t|\t%d\t|\t%d\t|\t%d\t|\t%d\t|\t%d\n", pr[over], at[over], bt[over], start, time, time - at[over] - bt[over], time - at[over]);
sum_wait += time - at[over] - bt[over];
sum_turnaround += time - at[over];
over++;
}
avgwait = (float)sum_wait / (float)n;
avgturn = (float)sum_turnaround / (float)n;
printf("Average waiting time is %f\n", avgwait);
printf("Average turnaround time is %f\n", avgturn);
return 0;
}
